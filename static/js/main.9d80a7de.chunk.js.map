{"version":3,"sources":["SortType.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortValue","setSortValue","reverseValue","setReverseValue","getSortedGoods","goods","preparedGoods","sort","val1","val2","Alphabetically","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","prev","Reset","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,2EAAAA,K,gCAAAA,E,gBAAAA,E,UAAAA,M,gBCQCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA8BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EA/BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAe1B,OAbIL,GACFM,EAAcC,MAAK,SAACC,EAAMC,GACxB,OAAQT,GACN,KAAKJ,EAASc,eACZ,OAAOF,EAAKG,cAAcF,GAC5B,KAAKb,EAASgB,OACZ,OAAOJ,EAAKK,OAASJ,EAAKI,OAC5B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAOgBS,CAAiBlB,EACtCG,EAAWE,GAmBb,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYlB,IAAcJ,EAASc,gBACrC,kBAEFS,QA1B8B,WACpClB,EAAaL,EAASc,iBAmBlB,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYlB,IAAcJ,EAASgB,QACrC,qBAEFO,QAlCsB,WAC5BlB,EAAaL,EAASgB,SA2BlB,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,CAAE,YAAahB,GACf,qBAEFiB,QAzCmB,WACzBhB,GAAgB,SAAAiB,GAAI,OAAKA,MAkCrB,sBAWElB,GAA8B,KAAdF,IAChB,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA9Ce,WACvBlB,EAAaL,EAASyB,OACtBlB,GAAgB,IAyCV,sBAUJ,6BACE,6BACGC,EAAekB,KAAI,SAAAC,GAAI,OACtB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCxHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9d80a7de.chunk.js","sourcesContent":["export enum SortType {\n  Alphabetically = 'alphabetically',\n  Length = 'length',\n  Reset = '',\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { SortType } from './SortType';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortValue: string,\n  reverseValue: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortValue) {\n    preparedGoods.sort((val1, val2) => {\n      switch (sortValue) {\n        case SortType.Alphabetically:\n          return val1.localeCompare(val2);\n        case SortType.Length:\n          return val1.length - val2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseValue) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortValue, setSortValue] = useState('');\n  const [reverseValue, setReverseValue] = useState(false);\n\n  const getSortedGoods = getPreparedGoods(goodsFromServer,\n    sortValue, reverseValue);\n\n  const handleClickSortAlphabetically = () => {\n    setSortValue(SortType.Alphabetically);\n  };\n\n  const handleClickSortLength = () => {\n    setSortValue(SortType.Length);\n  };\n\n  const handleClickReverse = () => {\n    setReverseValue(prev => !prev);\n  };\n\n  const handleClickReset = () => {\n    setSortValue(SortType.Reset);\n    setReverseValue(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': sortValue !== SortType.Alphabetically },\n            'button is-info',\n          )}\n          onClick={handleClickSortAlphabetically}\n\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': sortValue !== SortType.Length },\n            'button is-success',\n          )}\n          onClick={handleClickSortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': !reverseValue },\n            'button is-warning',\n          )}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {(reverseValue || sortValue !== '') && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClickReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {getSortedGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}